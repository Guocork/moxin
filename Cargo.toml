[workspace]
resolver = "2"

members = [
    "moxin-runner",
    "moxin-protocol",
    "moxin-backend",
    "moxin-fake-backend",
]

[package]
name = "moxin"
version = "0.1.0"
edition = "2021"
description = "A desktop GUI client for downloading and chatting with AI LLMs"

[dependencies]
moxin-protocol = { path = "moxin-protocol" }
moxin-backend = { path = "moxin-backend" }
moxin-fake-backend = { path = "moxin-fake-backend" }

makepad-widgets = { git = "https://github.com/makepad/makepad", branch = "rik" }

robius-open = { git = "https://github.com/project-robius/robius-open", rev = "b901523667d4a8bbb0bba3cd1ebcc0b94d33534e" }

chrono = "0.4"
directories = "5.0.1"
unicode-segmentation = "1.10.1"
anyhow = "1.0"
serde_json = "1.0"
serde = { version = "1.0.197", features = ["derive"] }
lipsum = "0.9"
rand = "0.8.5"


## Configuration for `cargo bundle`
[package.metadata.bundle]
identifier = "com.moxin-org.moxin"
long_description = """
Moxin is a desktop GUI client that lets you browse AI Large Language Models (LLMs), download them,
and run them locally to chat with the models.
Moxin is built using the Makepad UI framework (https://github.com/makepad/makepad)
and Project Robius platform abstractions (https://github.com/project-robius),
and currently runs on all three major desktop platforms: Windows, macOS, and Linux.
Moxin uses the wasmedge WASM runtime to locally run the AI models.
"""

## Configuration for `cargo packager`
[package.metadata.packager]
product_name = "Moxin"
identifier = "com.moxin-org.moxin"
category = "Utility"
publisher = "moxin-org"
homepage = "https://github.com/moxin-org"
icons = ["app_icon128x128.png"]
out_dir = "./dist"
binaries = [
    { path = "moxin-runner", main = true },
    { path = "moxin", main = false },
]

## See the below paragraph comments for more info on how we determine these `src` directories.
resources = [
    { src = "./dist/resources/makepad_widgets", target = "makepad_widgets" },
    { src = "./dist/resources/moxin", target = "moxin" },
]

## The below command uses cargo-metadata to determine the path of the `makepad_widgets` crate
## on the build system, and copies the `makepad-widgets/resources` directory to the `./dist/resources/makepad_widgets` directory.
## We also copy the Moxin project's `resources/` directory to the `./dist/resources/moxin` directory.
## This is done because the `cargo packager` command only supports defining resources at a known path
## (see the below `resources = [...]` block below),
## so we need to copy the resources to a known path before packaging
## such that cargo-packager can include them in the final package.
##
## We then build the entire Moxin project and set the `MAKEPAD_PACKAGE_DIR` env var to the proper value.
## * For macOS app bundles, this should be set to `../Resources`.
##   This only works because the `moxin-runner` binary sets the current working directory 
##   to the directory where the binary is located, which is `Moxin.app/Contents/MacOS/`.
##   (See the `run_moxin` function in `moxin-runner/src/main.rs` for more details.)
##   In a macOS app bundle, the resources directory is in `Moxin.app/Context/Resources/`,
##   so that's why we set `MAKEPAD_PACKAGE_DIR` to `../Resources` --- it must be relative to the binary's location,
##   which is up one parent directory.
## * For Debian `.deb` packages, this should be set to `/usr/lib/<main-binary-name>`,
##   which is currently `/usr/lib/moxin-runner`.
##   This is the directory in which `dpkg` copies app resource files to when installing the `.deb` package.
##
before-packaging-command = """
export CARGO_PACKAGER_HOST_OS=`rustc --print cfg | grep target_os= | sed -e 's/target_os=\"//g' -e 's/\"//g'`; \
echo "\n\nPackaging on host platform '$CARGO_PACKAGER_HOST_OS'\n\n"; \
if [ "$CARGO_PACKAGER_HOST_OS" = macos ]; then \
    export MAKEPAD_PACKAGE_DIR=../Resources; \
elif [ "$CARGO_PACKAGER_HOST_OS" = linux ]; then \
    export MAKEPAD_PACKAGE_DIR=/usr/lib/moxin-runner; \
else exit 2; \
fi; \
echo "MAKEPAD_PACKAGE_DIR='$MAKEPAD_PACKAGE_DIR'\n\n"; \
mkdir -p ./dist/resources/makepad_widgets/ \
&& cp -r `cargo metadata --format-version 1 | sed -e 's/,\"/,\\n\"/g' | grep 'widgets/Cargo.toml\"' | sed -e 's/\"manifest_path\":\"//g' -e 's/Cargo.toml\",/resources/g'` ./dist/resources/makepad_widgets/ \
&& mkdir -p ./dist/resources/moxin/ \
&& cp -r ./resources ./dist/resources/moxin/ \
&& cargo build --workspace --release  \
"""

## this is not currently needed.
# before-each-package-command = """
# echo -e "\n\nPackaging '$CARGO_PACKAGER_FORMAT'\n\n" \
# """

[package.metadata.packager.macos]
minimum_system_version = "11.0"

## Configuration for `cargo packager`'s generation of a macOS `.dmg`.
[package.metadata.packager.dmg]
background = "./Moxin macOS dmg background.png"
window_size = { width = 960, height = 540 }
app_position = { x = 200, y = 250 }
application_folder_position = { x = 760, y = 250 }
